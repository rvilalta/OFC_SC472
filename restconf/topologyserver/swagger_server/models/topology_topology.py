# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.topology_link import TopologyLink  # noqa: F401,E501
from swagger_server.models.topology_node import TopologyNode  # noqa: F401,E501
from swagger_server import util


class TopologyTopology(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, link: List[TopologyLink]=None, node: List[TopologyNode]=None):  # noqa: E501
        """TopologyTopology - a model defined in Swagger

        :param link: The link of this TopologyTopology.  # noqa: E501
        :type link: List[TopologyLink]
        :param node: The node of this TopologyTopology.  # noqa: E501
        :type node: List[TopologyNode]
        """
        self.swagger_types = {
            'link': List[TopologyLink],
            'node': List[TopologyNode]
        }

        self.attribute_map = {
            'link': 'link',
            'node': 'node'
        }
        self._link = link
        self._node = node

    @classmethod
    def from_dict(cls, dikt) -> 'TopologyTopology':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The topology.Topology of this TopologyTopology.  # noqa: E501
        :rtype: TopologyTopology
        """
        return util.deserialize_model(dikt, cls)

    @property
    def link(self) -> List[TopologyLink]:
        """Gets the link of this TopologyTopology.


        :return: The link of this TopologyTopology.
        :rtype: List[TopologyLink]
        """
        return self._link

    @link.setter
    def link(self, link: List[TopologyLink]):
        """Sets the link of this TopologyTopology.


        :param link: The link of this TopologyTopology.
        :type link: List[TopologyLink]
        """

        self._link = link

    @property
    def node(self) -> List[TopologyNode]:
        """Gets the node of this TopologyTopology.


        :return: The node of this TopologyTopology.
        :rtype: List[TopologyNode]
        """
        return self._node

    @node.setter
    def node(self, node: List[TopologyNode]):
        """Sets the node of this TopologyTopology.


        :param node: The node of this TopologyTopology.
        :type node: List[TopologyNode]
        """

        self._node = node
